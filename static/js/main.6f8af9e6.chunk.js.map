{"version":3,"sources":["Popup.js","Mainfile.js","reportWebVitals.js","index.js"],"names":["Popup","className","this","props","text","onClick","closePopup","React","Component","Mainfile","shoot","alert","textInput","current","value","state","showPopup","createRef","setState","type","ref","togglePopup","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAkBeA,G,6KAXf,OACA,qBAAKC,UAAU,QAAf,SACA,sBAAKA,UAAU,gBAAf,UACA,6BAAKC,KAAKC,MAAMC,OAChB,wBAAQC,QAASH,KAAKC,MAAMG,WAA5B,+B,GARoBC,IAAMC,YCkDXC,E,kDA/Cf,WAAYN,GAAO,IAAD,8BAClB,cAAMA,IAcHO,MAAM,WAICC,MAAM,EAAKC,UAAUC,QAAQC,QAjBvC,EAAKC,MAAM,CAAEC,WAAW,GACxB,EAAKJ,UAAYL,IAAMU,YAHL,E,0DAOdf,KAAKgB,SAAS,CACTF,WAAYd,KAAKa,MAAMC,c,+BAgBhC,OAEA,gCACA,6EACA,uBAAOG,KAAK,OAAOC,IAAKlB,KAAKU,YAC7B,wBAAQP,QAASH,KAAKQ,MAAtB,4BAGA,wBAAQL,QAASH,KAAKmB,YAAYC,KAAKpB,MAAvC,oCACA,wBAAQG,QAAS,WAAKM,MAAM,YAA5B,mBAGCT,KAAKa,MAAMC,UACZ,cAAC,EAAD,CACUZ,KAAK,qCACLE,WAAYJ,KAAKmB,YAAYC,KAAKpB,QAE1C,KAfF,Y,GA5BuBK,IAAMC,WCQde,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAOAC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f8af9e6.chunk.js","sourcesContent":["import React from 'react';  \r\nimport './App.css';  \r\n\r\nclass Popup extends React.Component {  \r\n\r\n  \r\n  render() {  \r\nreturn (  \r\n<div className='popup'>  \r\n<div className='popup\\_inner'>  \r\n<h1>{this.props.text}</h1>  \r\n<button onClick={this.props.closePopup}>close me</button>  \r\n</div>  \r\n</div>  \r\n);  \r\n}  \r\n}  \r\n\r\nexport default Popup;","import React from 'react';\r\nimport Popup from './Popup';\r\n\r\n\r\nclass Mainfile extends React.Component{\r\n\r\nconstructor(props){\r\nsuper(props);\r\nthis.state={ showPopup: false };\r\nthis.textInput = React.createRef();\r\n}\r\n\r\ntogglePopup() {  \r\n    this.setState({  \r\n         showPopup: !this.state.showPopup  \r\n    });  \r\n     }  \r\n\r\n\r\n      \r\n\r\n   shoot=()=>{\r\n     \r\n          \r\n     \r\n          alert(this.textInput.current.value);\r\n     }\r\n\r\n     render(){\r\n\r\nreturn(\r\n\r\n<div>\r\n<h1> Simple Popup Example In React Application </h1> \r\n<input type='text' ref={this.textInput} />\r\n<button onClick={this.shoot}>Take the shot!</button>\r\n\r\n\r\n<button onClick={this.togglePopup.bind(this)}> Click To Launch Popup</button>  \r\n<button onClick={()=>{alert('testing')}}>click</button>\r\n\r\n\r\n{this.state.showPopup ?  \r\n<Popup  \r\n          text='Click \"Close Button\" to hide popup'  \r\n          closePopup={this.togglePopup.bind(this)}  \r\n/>  \r\n: null  \r\n}  </div>\r\n);\r\n }\r\n}\r\n\r\nexport default Mainfile;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Mainfile from './Mainfile';\n//import App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Mainfile/>\n\n\n\n  \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//// Mainfile \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}